# para chamar as duas funções 50 vezes, basta criar um for grande o suficiente e armazenar os diversos valores encontrados
#em dois arrays diferentes.

n_sinc = Array(Any, 50)
n_tempo_s = Array(Any, 50)

n_tempo_as = Array(Any, 50)
n_asinc = Array(Any, 50)


for i in 1:50
    n_tempo_s[i] = @timed B_multicast_s(g, "oi! s", println)
    #precisamos usar a segunda coluna por causa do retorno da função timed
    n_sinc[i] = n_tempo_s[i][2] 
    
    n_tempo_as[i] = @timed B_multicast(g, "oi! a", println)
    n_asinc[i] = n_tempo_as[i][2]
end

#agora, basta chamar a função de calcular o intervalo de confiança
#esta função pode ser encontrada em
#http://stackoverflow.com/questions/20425473/calculate-confidence-interval-in-julia
#Estou tendo um erro nesta chamada de função, então vou utilizar o código seguinte a mesma

using Distributions

#using Distributions, HypothesisTests
#data1 = n_sinc
#data2 = n_asinc
#resultado1 = ci(OneSampleTTest(data1))
#resultado2 = ci(OneSampleTTest(data2))

# Cálculo para a versão assíncrona
x = n_asinc;
conf_level = 0.95;

alpha = (1 - conf_level);
tstar = quantile(TDist(length(x)-1), 1 - alpha/2);
sdev = sqrt(sum((x - mean(x)).^2) / (length(x) - 1));
SE = sdev/sqrt(length(x));

lo, hi = mean(x) + [-1, 1] * tstar * SE;

assincrono = mean(n_asinc)

# Cálculo para a versão síncrona
x = n_sinc;
conf_level = 0.95;

alpha = (1 - conf_level);
tstar = quantile(TDist(length(x)-1), 1 - alpha/2);
sdev = sqrt(sum((x - mean(x)).^2) / (length(x) - 1));
SE = sdev/sqrt(length(x));

lo_s, hi_s = mean(x) + [-1, 1] * tstar * SE;

sincrono = mean(n_sinc)

# secção de Plot
using PyPlot

names = ["Síncrono", "Assíncrono"]
tamanho = [0.5, 0.7]

barra1 = bar(0.5, sincrono, color="red",align="center", yerr = lo_s, hi_s, label = "síncrono")
barra2 = bar(0.7, assincrono, color="blue", yerr = lo, hi, label = "assíncrono")
title("Síncrono x assíncrono")
xlabel("B_multicast")
ylabel("Tempo")
xticks(tamanho, names)
